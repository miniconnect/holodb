plugins {
    id 'java-library'
}

description = "HoloDB configuration"

sourceSets {
    schemaGen {
        compileClasspath += sourceSets.main.runtimeClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

configurations {
    schemaGenImplementation.extendsFrom implementation
    schemaGenRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation project(':spi')
    api "hu.webarticum.miniconnect.api:lang:${miniConnectApiVersion}"
    implementation "hu.webarticum.miniconnect:util:${miniConnectVersion}"
    
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.19.2'
    
    schemaGenImplementation "hu.webarticum.miniconnect.api:lang-jackson:${miniConnectApiVersion}"
    schemaGenImplementation 'com.kjetland:mbknor-jackson-jsonschema_2.13:1.0.39'
    schemaGenImplementation 'org.scala-lang:scala-library:2.13.16'
}

def schemaFile = layout.buildDirectory.file('schemas/holodb-config.schema.json')

tasks.register('generateSchema', JavaExec) {
    dependsOn tasks.named('classes')
    mainClass = 'hu.webarticum.holodb.config.gradle.schemagen.SchemaGeneratorMain'
    classpath = sourceSets.schemaGen.runtimeClasspath
    args = [ schemaFile.get().asFile.absolutePath ]
    inputs.files(sourceSets.main.output, sourceSets.schemaGen.output)
    outputs.file(schemaFile)
}

publishing {
    publications.withType(MavenPublication).matching { it.name == 'mavenJava' }.configureEach {
        artifact(schemaFile) {
            classifier = 'schema'
            extension  = 'json'
            builtBy tasks.named('generateSchema')
        }
    }
}

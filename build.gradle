plugins {
    id 'com.palantir.git-version' version '0.14.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

description = "HoloDB - instant random relational data"

def scmUrl = 'https://github.com/miniconnect/holodb.git'
def websiteUrl = scmUrl.replaceAll(/\.git$/, "");

def automaticVersion = '0.1.0-SNAPSHOT'
def versionMatcher = gitVersion() =~ /^v?(\d+\.\d+\.)(\d+)(.*)$/
if (versionMatcher.size() > 0) {
    def versionMatch = versionMatcher[0]
	def isVersionDirty = !versionMatch[3].isEmpty()
	def versionPrefix = versionMatch[1]
	def versionPatch = isVersionDirty ? (Integer.parseInt(versionMatch[2]) + 1) + "" : versionMatch[2];
	def versionSuffix = isVersionDirty ? "-SNAPSHOT" : ""
    automaticVersion = versionPrefix + versionPatch + versionSuffix
}
    
defaultTasks 'build'

nexusPublishing {
    repositories {
        sonatype()
    }
}

allprojects {
    group 'hu.webarticum.holodb'
    version automaticVersion
    
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    afterEvaluate {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        
        if (sourceSets.hasProperty('lab')) {
            task execLab(type: JavaExec) {
                group = 'Execution'
                description = 'Run lab demo main class'
                classpath = sourceSets.lab.runtimeClasspath
                mainClass = System.getProperty("lab.exec.main.class")
                standardInput = System.in
            }
        }
        
        java {
            withJavadocJar()
            withSourcesJar()
        }
        
        test {
            useJUnitPlatform()
            testLogging {
                events 'failed'
                showExceptions true
                exceptionFormat 'full'
                showCauses true
                showStackTraces true
                showStandardStreams false
            }
        }
        
        tasks.withType(JavaCompile) {
            options.compilerArgs << '-Xlint:unchecked'
            options.deprecation = true
        }
        
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                }
            }
        }
        
        project.plugins.withType(MavenPublishPlugin).all {
            PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
            publishing.publications.withType(MavenPublication).all { mavenPublication ->
                mavenPublication.pom {
                    name = project.name
                    description = project.description
                    url = websiteUrl
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    scm {
                        connection = 'scm:git:' + scmUrl
                        developerConnection = 'scm:git:' + scmUrl
                        url = scmUrl
                    }
                    developers {
                        developer {
                            id = 'davidsusu'
                            name = 'Dávid Horváth'
                            email = 'horvath@webarticum.hu'
                        }
                    }
                }
            }
        }
        
        signing {
            required { true }
            sign configurations.archives
            sign publishing.publications.mavenJava
        }
        
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '5.3.2'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'nebula.lint' version '20.6.2'
}

description = "HoloDB - instant random relational data"

def scmUrl = 'https://github.com/miniconnect/holodb.git'
def websiteUrl = scmUrl.replaceAll(/\.git$/, "");

def automaticVersion = '0.1.0-SNAPSHOT'
def versionMatcher = grgit.describe() =~ /^v?(\d+\.\d+\.)(\d+)(.*)$/
if (versionMatcher.size() > 0) {
    def versionMatch = versionMatcher[0]
    def isVersionDirty = !versionMatch[3].isEmpty()
    def versionPrefix = versionMatch[1]
    def versionPatch = isVersionDirty ? (Integer.parseInt(versionMatch[2]) + 1) + "" : versionMatch[2];
    def versionSuffix = isVersionDirty ? "-SNAPSHOT" : ""
    automaticVersion = versionPrefix + versionPatch + versionSuffix
}

defaultTasks 'build'

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri(providers.gradleProperty('sonatypeUrl').orNull))
        }
    }
}

tasks.register('printVersion') {
    inputs.property('projectVersion', project.version)
    doLast {
        println inputs.properties['projectVersion']
    }
}

allprojects {
    group = 'hu.webarticum.holodb'
    version = automaticVersion
    
    ext.miniConnectApiVersion = '0.3.1-SNAPSHOT'
    ext.miniConnectVersion = '0.6.1-SNAPSHOT'
    ext.miniBaseVersion = '0.3.1-SNAPSHOT'
    
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    
    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    
    afterEvaluate {
        if (sourceSets.hasProperty('lab')) {
            tasks.register('execLab', JavaExec) {
                group = 'Execution'
                description = 'Run lab demo main class'
                classpath = sourceSets.lab.runtimeClasspath
                mainClass = System.getProperty("lab.exec.main.class")
                standardInput = System.in
            }
        }
        
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.release = 8
        }
        
        java {
            withJavadocJar()
            withSourcesJar()
        }
        
        javadoc {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
        
        def moduleNamePrefix = 'hu.webarticum.holodb.'
        def cleanProjectName = project.name.replaceAll(/\W/, ".")
        def moduleName = "${moduleNamePrefix}${cleanProjectName}"
        
        jar {
            manifest {
                attributes('Automatic-Module-Name': moduleName)
            }
        }
        
        test {
            useJUnitPlatform()
            testLogging {
                events 'failed'
                showExceptions = true
                exceptionFormat = 'full'
                showCauses = true
                showStackTraces = true
                showStandardStreams = false
            }
        }
        
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    suppressAllPomMetadataWarnings()
                }
            }
        }
        
        project.plugins.withType(MavenPublishPlugin).all {
            PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
            publishing.publications.withType(MavenPublication).all { mavenPublication ->
                mavenPublication.pom {
                    name = project.name
                    description = project.description
                    url = websiteUrl
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    scm {
                        connection = 'scm:git:' + scmUrl
                        developerConnection = 'scm:git:' + scmUrl
                        url = scmUrl
                    }
                    developers {
                        developer {
                            id = 'davidsusu'
                            name = 'Dávid Horváth'
                            email = 'horvath@webarticum.hu'
                        }
                    }
                }
            }
        }
        
        signing {
            required = true
            sign publishing.publications
        }
        
    }
}
